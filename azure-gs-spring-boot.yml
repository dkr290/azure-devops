# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

stages:

- stage: Build
  jobs:
  - job: Build_Maven_app

    pool: 'onPremises'



    steps:
    
    - task: Maven@3
      inputs:
        mavenPomFile: 'src/gs-spring-boot/app/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**/*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - bash: ls -R  $(System.DefaultWorkingDirectory)
    - bash: ls -R  $(Build.ArtifactStagingDirectory)
- stage: DeployToWebapp
  jobs:
  - deployment: DeployToWebapp
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'FreeOneYear(5f7292bd-e975-43ef-aa61-1871cb2a573d)'
              appType: 'webAppLinux'
              appName: 'javaapp1980'
              package: '$(Build.ArtifactStagingDirectory)/src/gs-spring-boot/app/target/gs-spring-boot-0.1.0.jar'