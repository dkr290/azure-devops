# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
stages:

- stage: BuildTemplate
  jobs:
  - job: Build_Django_Mysql_ARM

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)/src/Azure-Django-Postgres'
        Contents: '**/*.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: BuildDjangoAPP
  jobs:
  - job: Build_Django_App

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install setup
          pip install -r src/djangoapp/requirements.txt
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src/djangoapp/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/djangoapp$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/djangoapp$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- stage: DeployservicesARM
  jobs:
  - deployment: DeployArmTemplate
    environment: Development
   
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: 'FreeOneYear(5f7292bd-e975-43ef-aa61-1871cb2a573d)'
              subscriptionId: '5f7292bd-e975-43ef-aa61-1871cb2a573d'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(ResourceGroupName)'
              location: '$(Location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/drop/djangoPostgres.json'
              csmParametersFile: '$(Pipeline.Workspace)/drop/djangoPostgres.parameters.json'
              overrideParameters: '-administratorLogin $(AdminUser) -administratorLoginPassword $(loginPassword) -siteName $(siteName)'
              deploymentMode: 'Incremental'

- stage: UploadDjangoCode
  jobs:
  - deployment: ConfigDjangoEnvs
    environment: Development
    dependsOn:
    - DeployservicesARM
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: 'FreeOneYear(5f7292bd-e975-43ef-aa61-1871cb2a573d)'
              appName: '$(siteName)'
              resourceGroupName: '$(ResourceGroupName)'
              appSettings: |
                [
                        {
                          "name": "DJANGO_ENV",
                          "value": "production",
                          "slotSetting": false
                        },
                        {
                          "name": "DBHOST",
                          "value": "$(siteName)pgserver", 
                          "slotSetting": false
                        },
                {
                          "name": "DBNAME",
                          "value": "$(siteName)database", 
                          "slotSetting": false
                        },
                {
                          "name": "DBUSER",
                          "value": "$(AdminUser)", 
                          "slotSetting": false
                        },
                {
                          "name": "DBPASS",
                          "value": "$(loginPassword)", 
                          "slotSetting": false
                        },
                        
                      ]
  - deployment: DeployDjangoAppCode
    environment: Development
    dependsOn:
    - DeployservicesARM
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'FreeOneYear(5f7292bd-e975-43ef-aa61-1871cb2a573d)'
              appType: 'webAppLinux'
              appName: '$(siteName)'
              package: '$(Pipeline.Workspace)/drop/djangoapp$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.8'

  
